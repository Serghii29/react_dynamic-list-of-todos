{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/PrepareTodo.ts","index.tsx"],"names":["TodoList","React","memo","todos","setSelectedTodo","isSelectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","sortBy","query","onHandleSelect","onHandleChangeQuery","value","onChange","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","closeTodo","useState","user","setUser","hasErorr","setHasErorr","isLoading","setIsLoading","fetchUser","a","userId","data","useEffect","href","email","name","App","setTodos","setIsSelectedTodo","setSortBy","setQuery","hasError","setHasError","preparedquery","trim","toLocaleLowerCase","preparedTodo","useMemo","qwery","field","isVisibleTodo","filter","includes","prepareTodo","handleSelect","useCallback","sortField","handleChangeQuery","searchString","fetchTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c495f09e.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setSelectedTodo: (todo: Todo) => void,\n  isSelectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setSelectedTodo,\n  isSelectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isSelectedTodo?.id === todo.id,\n            })}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n\n              {isSelectedTodo?.id === todo.id\n                ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => (\n                      setSelectedTodo(todo)\n                    )}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\n\ntype Props = {\n  sortBy: string\n  query: string,\n  onHandleSelect: (sortField: string) => void,\n  onHandleChangeQuery: (searchString: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  sortBy,\n  query,\n  onHandleSelect,\n  onHandleChangeQuery,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={sortBy}\n            onChange={({ target }) => {\n              onHandleSelect(target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          onChange={({ target }) => {\n            onHandleChangeQuery(target.value);\n          }}\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                onHandleChangeQuery('');\n              }}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = React.memo(() => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n));\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  isSelectedTodo: Todo,\n  closeTodo: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ isSelectedTodo, closeTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasErorr, setHasErorr] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchUser = async () => {\n    try {\n      setIsLoading(true);\n      const data = await getUser(isSelectedTodo.userId);\n\n      setUser(data);\n    } catch {\n      setHasErorr(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  if (hasErorr) {\n    return (\n      <span>Sorry, try later</span>\n    );\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      { isLoading && <Loader /> }\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {isSelectedTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {isSelectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {isSelectedTodo.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nimport { prepareTodo } from './utils/PrepareTodo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isSelectedTodo, setIsSelectedTodo] = useState<Todo | null>(null);\n  const [sortBy, setSortBy] = useState('all');\n  const [query, setQuery] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const preparedquery = query.trim().toLocaleLowerCase();\n\n  const preparedTodo = useMemo(() => (\n    prepareTodo(preparedquery, todos, sortBy)\n  ),\n  [preparedquery, todos, sortBy]);\n\n  const handleSelect = useCallback((sortField: string) => {\n    setSortBy(sortField);\n  }, []);\n\n  const handleChangeQuery = useCallback((searchString: string) => {\n    setQuery(searchString);\n  }, []);\n\n  const fetchTodos = async () => {\n    try {\n      setIsLoading(true);\n\n      const data = await getTodos();\n\n      setTodos(data);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const closeTodo = () => {\n    setIsSelectedTodo(null);\n  };\n\n  const setSelectedTodo = (todo: Todo) => {\n    setIsSelectedTodo(todo);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          {hasError\n            ? (\n              <span>Sorry, try later</span>\n            ) : (\n              <div className=\"box\">\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter\n                    sortBy={sortBy}\n                    query={query}\n                    onHandleSelect={handleSelect}\n                    onHandleChangeQuery={handleChangeQuery}\n                  />\n                </div>\n\n                <div className=\"block\">\n                  { isLoading && <Loader /> }\n                  {todos.length && (\n                    <TodoList\n                      todos={preparedTodo}\n                      setSelectedTodo={setSelectedTodo}\n                      isSelectedTodo={isSelectedTodo}\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n        </div>\n      </div>\n\n      {isSelectedTodo && (\n        <TodoModal\n          isSelectedTodo={isSelectedTodo}\n          closeTodo={closeTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function prepareTodo(\n  qwery: string,\n  todos: Todo[],\n  field: string,\n) {\n  let isVisibleTodo = [...todos];\n\n  if (qwery) {\n    isVisibleTodo = isVisibleTodo.filter(todo => {\n      return todo\n        .title\n        .toLocaleLowerCase()\n        .includes(qwery);\n    });\n  }\n\n  switch (field) {\n    case ('active'):\n      isVisibleTodo = isVisibleTodo.filter(todo => !todo.completed);\n      break;\n\n    case ('completed'):\n      isVisibleTodo = isVisibleTodo.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return isVisibleTodo;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}